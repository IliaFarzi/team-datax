# .github/workflows/datax-deploy-backend-dev.yml
name: datax-deploy-backend-dev

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - '.github/workflows/datax-deploy-backend-dev.yml'
      - 'docker-compose-dev.yml'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify docker-compose-dev.yml exists
        run: |
          echo "üîç Checking for docker-compose-dev.yml in repo..."
          ls -l docker-compose-dev.yml || { echo "ERROR: docker-compose-dev.yml not found in repo"; exit 1; }
          echo "‚úÖ docker-compose-dev.yml found"

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7  # change to stable version
        with:
          host: ${{ secrets.DEV_VPS_HOST }}
          username: ${{ secrets.DEV_VPS_USERNAME }}
          port: ${{ secrets.DEV_VPS_PORT }}
          key: ${{ secrets.DEV_VPS_KEY }}
          source: "docker-compose-dev.yml"
          target: "/home/datax-backend"
          overwrite: true
          strip_components: 0
          debug: true

      - name: Verify file copy on VPS
        uses: appleboy/ssh-action@v1.0.3  # change to stable version
        with: 
          host: ${{ secrets.DEV_VPS_HOST }}
          username: ${{ secrets.DEV_VPS_USERNAME }}
          port: ${{ secrets.DEV_VPS_PORT }}
          key: ${{ secrets.DEV_VPS_KEY }}
          script: |
            echo "üîç Checking copied docker-compose-dev.yml on VPS..."
            sudo ls -l /home/datax-backend/docker-compose-dev.yml || { echo "ERROR: docker-compose-dev.yml not copied to /home/datax-backend"; exit 1; }
            echo "‚úÖ docker-compose-dev.yml copied successfully"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Verify Docker Hub login
        run: |
          echo "üîç Verifying Docker Hub login..."
          docker pull hello-world || { echo "ERROR: Docker Hub login failed"; exit 1; }
          echo "‚úÖ Docker Hub login successful"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/datax-backend-dev:latest

      - name: Show built image digest
        run: |
          echo "üîç Built image digest..."
          echo "‚úÖ Dev image digest = ${{ steps.build.outputs.digest }}"

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3  # change to stable version
        with:
          host: ${{ secrets.DEV_VPS_HOST }}
          username: ${{ secrets.DEV_VPS_USERNAME }}
          port: ${{ secrets.DEV_VPS_PORT }}
          key: ${{ secrets.DEV_VPS_KEY }}
          script: |
            cd /home/datax-backend

            # File checks
            echo "üîç Checking files on VPS..."
            sudo ls -l /home/datax-backend/docker-compose-dev.yml || { echo "ERROR: docker-compose-dev.yml not found"; exit 1; }
            sudo ls -l /home/datax-backend/.env.datax || { echo "ERROR: .env.datax not found"; exit 1; }
            echo "‚úÖ Files exist"

            # Overwrite .env.datax
            echo "üîç Writing .env.datax..."
            sudo bash -c "echo 'AUTH_JWT_SECRET=${{ secrets.DEV_AUTH_JWT_SECRET }}' > .env.datax"
            sudo bash -c "echo 'AUTH_SESSION_SECRET=${{ secrets.DEV_AUTH_SESSION_SECRET }}' >> .env.datax"
            sudo bash -c "echo 'DB_MONGO_URI=mongodb://Muhammad:CIHTS99FV@mongo:27017/datax' >> .env.datax"
            sudo bash -c "echo 'DB_MONGO_NAME=${{ secrets.DEV_DB_MONGO_NAME }}' >> .env.datax"
            sudo bash -c "echo 'DB_MONGO_COLLECTION_CHAT_SESSIONS=${{ secrets.DEV_DB_MONGO_COLLECTION_CHAT_SESSIONS }}' >> .env.datax"
            sudo bash -c "echo 'DB_MONGO_COLLECTION_USERS=${{ secrets.DEV_DB_MONGO_COLLECTION_USERS }}' >> .env.datax"
            sudo bash -c "echo 'STORAGE_MINIO_ENDPOINT=minio:9000' >> .env.datax"
            sudo bash -c "echo 'STORAGE_MINIO_ACCESS_KEY=${{ secrets.DEV_STORAGE_MINIO_USERNAME }}' >> .env.datax"
            sudo bash -c "echo 'STORAGE_MINIO_SECRET_KEY=${{ secrets.DEV_STORAGE_MINIO_PASSWORD }}' >> .env.datax"
            sudo bash -c "echo 'STORAGE_MINIO_SECURE=${{ secrets.DEV_STORAGE_MINIO_SECURE }}' >> .env.datax"
            sudo bash -c "echo 'STORAGE_MINIO_BUCKET_SHEETS=${{ secrets.DEV_STORAGE_MINIO_BUCKET_SHEETS }}' >> .env.datax"
            sudo bash -c "echo 'STORAGE_MINIO_BUCKET_UPLOADS=${{ secrets.DEV_STORAGE_MINIO_BUCKET_UPLOADS }}' >> .env.datax"
            sudo bash -c "echo 'AUTH_GOOGLE_CLIENT_ID=${{ secrets.DEV_AUTH_GOOGLE_CLIENT_ID }}' >> .env.datax"
            sudo bash -c "echo 'AUTH_GOOGLE_CLIENT_SECRET=${{ secrets.DEV_AUTH_GOOGLE_CLIENT_SECRET }}' >> .env.datax"
            sudo bash -c "echo 'AUTH_GOOGLE_PROJECT_ID=${{ secrets.DEV_AUTH_GOOGLE_PROJECT_ID }}' >> .env.datax"
            sudo bash -c "echo 'AUTH_GOOGLE_URI_AUTH=${{ secrets.DEV_AUTH_GOOGLE_URI_AUTH }}' >> .env.datax"
            sudo bash -c "echo 'AUTH_GOOGLE_URI_TOKEN=${{ secrets.DEV_AUTH_GOOGLE_URI_TOKEN }}' >> .env.datax"
            sudo bash -c "echo 'AUTH_GOOGLE_URI_CERTS=${{ secrets.DEV_AUTH_GOOGLE_URI_CERTS }}' >> .env.datax"
            sudo bash -c "echo 'MAIL_SMTP_HOST=${{ secrets.DEV_MAIL_SMTP_HOST }}' >> .env.datax"
            sudo bash -c "echo 'MAIL_SMTP_PORT=${{ secrets.DEV_MAIL_SMTP_PORT }}' >> .env.datax"
            sudo bash -c "echo 'MAIL_SMTP_USER=${{ secrets.DEV_MAIL_SMTP_USER }}' >> .env.datax"
            sudo bash -c "echo 'MAIL_SMTP_PASSWORD=${{ secrets.DEV_MAIL_SMTP_PASSWORD }}' >> .env.datax"
            sudo bash -c "echo 'MAIL_FROM_NAME=${{ secrets.DEV_MAIL_FROM_NAME }}' >> .env.datax"
            sudo bash -c "echo 'MAIL_FROM_ADDRESS=${{ secrets.DEV_MAIL_FROM_ADDRESS }}' >> .env.datax"
            sudo bash -c "echo 'LLM_OPENROUTER_API_BASE=${{ secrets.DEV_LLM_OPENROUTER_API_BASE }}' >> .env.datax"
            sudo bash -c "echo 'LLM_OPENROUTER_API_KEY=${{ secrets.DEV_LLM_OPENROUTER_API_KEY }}' >> .env.datax"
            sudo bash -c "echo 'MODEL_NAME=${{ secrets.DEV_MODEL_NAME }}' >> .env.datax"
            sudo bash -c "echo 'FRONTEND_URL=${{ secrets.DEV_FRONTEND_URL }}' >> .env.datax"
            sudo bash -c "echo 'VPS_URL=${{ secrets.DEV_VPS_URL }}' >> .env.datax"
            sudo bash -c "echo 'VPS_HOST=${{ secrets.DEV_VPS_HOST }}' >> .env.datax"
            sudo bash -c "echo 'VPS_USERNAME=${{ secrets.DEV_VPS_USERNAME }}' >> .env.datax"
            sudo bash -c "echo 'VPS_PORT=${{ secrets.DEV_VPS_PORT }}' >> .env.datax"
            sudo bash -c "echo 'CORS_CONNECTION=${{ secrets.DEV_CORS_CONNECTION }}' >> .env.datax"
            sudo bash -c "echo 'DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}' >> .env.datax"
            sudo bash -c "echo 'DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}' >> .env.datax"
            sudo cat .env.datax  
            echo "‚úÖ .env.datax written successfully"

            # Debug: Verify each env variable exists
            echo "üîç Verifying .env.datax variables..."
            sudo grep -q "AUTH_JWT_SECRET" .env.datax || { echo "ERROR: AUTH_JWT_SECRET not set"; exit 1; }
            sudo grep -q "AUTH_SESSION_SECRET" .env.datax || { echo "ERROR: AUTH_SESSION_SECRET not set"; exit 1; }
            sudo grep -q "DB_MONGO_URI" .env.datax || { echo "ERROR: DB_MONGO_URI not set"; exit 1; }
            sudo grep -q "DB_MONGO_NAME" .env.datax || { echo "ERROR: DB_MONGO_NAME not set"; exit 1; }
            sudo grep -q "DB_MONGO_COLLECTION_CHAT_SESSIONS" .env.datax || { echo "ERROR: DB_MONGO_COLLECTION_CHAT_SESSIONS not set"; exit 1; }
            sudo grep -q "DB_MONGO_COLLECTION_USERS" .env.datax || { echo "ERROR: DB_MONGO_COLLECTION_USERS not set"; exit 1; }
            sudo grep -q "STORAGE_MINIO_ENDPOINT" .env.datax || { echo "ERROR: STORAGE_MINIO_ENDPOINT not set"; exit 1; }
            sudo grep -q "STORAGE_MINIO_ACCESS_KEY" .env.datax || { echo "ERROR: STORAGE_MINIO_ACCESS_KEY not set"; exit 1; }
            sudo grep -q "STORAGE_MINIO_SECRET_KEY" .env.datax || { echo "ERROR: STORAGE_MINIO_SECRET_KEY not set"; exit 1; }
            sudo grep -q "STORAGE_MINIO_SECURE" .env.datax || { echo "ERROR: STORAGE_MINIO_SECURE not set"; exit 1; }
            sudo grep -q "STORAGE_MINIO_BUCKET_SHEETS" .env.datax || { echo "ERROR: STORAGE_MINIO_BUCKET_SHEETS not set"; exit 1; }
            sudo grep -q "STORAGE_MINIO_BUCKET_UPLOADS" .env.datax || { echo "ERROR: STORAGE_MINIO_BUCKET_UPLOADS not set"; exit 1; }
            sudo grep -q "AUTH_GOOGLE_CLIENT_ID" .env.datax || { echo "ERROR: AUTH_GOOGLE_CLIENT_ID not set"; exit 1; }
            sudo grep -q "AUTH_GOOGLE_CLIENT_SECRET" .env.datax || { echo "ERROR: AUTH_GOOGLE_CLIENT_SECRET not set"; exit 1; }
            sudo grep -q "AUTH_GOOGLE_PROJECT_ID" .env.datax || { echo "ERROR: AUTH_GOOGLE_PROJECT_ID not set"; exit 1; }
            sudo grep -q "AUTH_GOOGLE_URI_AUTH" .env.datax || { echo "ERROR: AUTH_GOOGLE_URI_AUTH not set"; exit 1; }
            sudo grep -q "AUTH_GOOGLE_URI_TOKEN" .env.datax || { echo "ERROR: AUTH_GOOGLE_URI_TOKEN not set"; exit 1; }
            sudo grep -q "AUTH_GOOGLE_URI_CERTS" .env.datax || { echo "ERROR: AUTH_GOOGLE_URI_CERTS not set"; exit 1; }
            sudo grep -q "MAIL_SMTP_HOST" .env.datax || { echo "ERROR: MAIL_SMTP_HOST not set"; exit 1; }
            sudo grep -q "MAIL_SMTP_PORT" .env.datax || { echo "ERROR: MAIL_SMTP_PORT not set"; exit 1; }
            sudo grep -q "MAIL_SMTP_USER" .env.datax || { echo "ERROR: MAIL_SMTP_USER not set"; exit 1; }
            sudo grep -q "MAIL_SMTP_PASSWORD" .env.datax || { echo "ERROR: MAIL_SMTP_PASSWORD not set"; exit 1; }
            sudo grep -q "MAIL_FROM_NAME" .env.datax || { echo "ERROR: MAIL_FROM_NAME not set"; exit 1; }
            sudo grep -q "MAIL_FROM_ADDRESS" .env.datax || { echo "ERROR: MAIL_FROM_ADDRESS not set"; exit 1; }
            sudo grep -q "LLM_OPENROUTER_API_BASE" .env.datax || { echo "ERROR: LLM_OPENROUTER_API_BASE not set"; exit 1; }
            sudo grep -q "LLM_OPENROUTER_API_KEY" .env.datax || { echo "ERROR: LLM_OPENROUTER_API_KEY not set"; exit 1; }
            sudo grep -q "MODEL_NAME" .env.datax || { echo "ERROR: MODEL_NAME not set"; exit 1; }
            sudo grep -q "FRONTEND_URL" .env.datax || { echo "ERROR: FRONTEND_URL not set"; exit 1; }
            sudo grep -q "VPS_URL" .env.datax || { echo "ERROR: VPS_URL not set"; exit 1; }
            sudo grep -q "VPS_HOST" .env.datax || { echo "ERROR: VPS_HOST not set"; exit 1; }
            sudo grep -q "VPS_USERNAME" .env.datax || { echo "ERROR: VPS_USERNAME not set"; exit 1; }
            sudo grep -q "VPS_PORT" .env.datax || { echo "ERROR: VPS_PORT not set"; exit 1; }
            sudo grep -q "CORS_CONNECTION" .env.datax || { echo "ERROR: CORS_CONNECTION not set"; exit 1; }
            sudo grep -q "DOCKERHUB_USERNAME" .env.datax || { echo "ERROR: DOCKERHUB_USERNAME not set"; exit 1; }
            sudo grep -q "DOCKERHUB_TOKEN" .env.datax || { echo "ERROR: DOCKERHUB_TOKEN not set"; exit 1; }
            echo "üîç Total env variables set:"
            sudo wc -l .env.datax  # Show number of lines in .env.datax
            echo "üîç Sanitized .env.datax content (values masked):"
            sudo sed 's/=.*$/=<MASKED>/' .env.datax  # Show keys with masked values
            echo "‚úÖ .env.datax written and verified successfully"

            # Docker login
            echo "üîç Logging in to Docker Hub..."
            sudo bash -c "echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin" || { echo "ERROR: Docker Hub login failed"; exit 1; }
            echo "‚úÖ Docker Hub login successful"

            # Ensure network exists
            echo "üîç Checking network multi-team-dev-deployment_shared-net..."
            sudo docker network inspect multi-team-dev-deployment_shared-net >/dev/null 2>&1 || sudo docker network create multi-team-dev-deployment_shared-net || { echo "ERROR: Failed to create network"; exit 1; }
            echo "‚úÖ Network exists or created"

            # Stop and remove old container
            echo "üîç Stopping and removing old container..."
            sudo docker rm -f datax-backend-dev || { echo "WARNING: No old container to remove"; }

            # remove old image
            sudo docker image prune -af || true

            echo "‚úÖ Old container removed"
            echo "‚úÖ Old image pruned"

            # Pull image
            echo "üîç Pulling Docker image..."
            sudo docker compose -f docker-compose-dev.yml pull || { echo "ERROR: Failed to pull image"; exit 1; }
            echo "‚úÖ Image pulled successfully"

            # Start container
            echo "üîç Starting container..."
            sudo docker compose -f docker-compose-dev.yml up -d || { echo "ERROR: Failed to start container"; exit 1; }
            echo "‚úÖ Container started"

            # Wait & Check
            echo "üîç Waiting for container to stabilize..."
            sleep 30
            echo "üîç Checking container status..."
            sudo docker ps -a | grep datax-backend-dev || { echo "ERROR: Container datax-backend-dev not running"; exit 1; }
            echo "‚úÖ Container is running"
            echo "üîç Checking network connection..."
            sudo docker network inspect multi-team-dev-deployment_shared-net | grep datax-backend-dev || { echo "ERROR: Container not connected to multi-team-dev-deployment_shared-net"; exit 1; }
            echo "‚úÖ Container connected to network"
            echo "‚úÖ Deployment successful! Visit: ${{ secrets.DEV_VPS_URL }}"