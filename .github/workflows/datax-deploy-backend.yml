name: datax-deploy-backend

on:
  push:
    branches:
      - main      # Development
      - prod      # Production
    paths:
      - 'api/**'
      - '.github/workflows/datax-deploy-backend.yml'

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # =========================
      # Set environment variables dynamically
      # =========================
      - name: Set environment variables
        run: |
          if [ "${GITHUB_REF##*/}" = "prod" ]; then
            PREFIX="PROD"
          else
            PREFIX="DEV"
          fi

          # Map all secrets using PREFIX
          echo "AUTH_GOOGLE_CLIENT_ID=${{ secrets[format('{0}_AUTH_GOOGLE_CLIENT_ID', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_GOOGLE_CLIENT_SECRET=${{ secrets[format('{0}_AUTH_GOOGLE_CLIENT_SECRET', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_GOOGLE_PROJECT_ID=${{ secrets[format('{0}_AUTH_GOOGLE_PROJECT_ID', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_GOOGLE_URI_AUTH=${{ secrets[format('{0}_AUTH_GOOGLE_URI_AUTH', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_GOOGLE_URI_CERTS=${{ secrets[format('{0}_AUTH_GOOGLE_URI_CERTS', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_GOOGLE_URI_TOKEN=${{ secrets[format('{0}_AUTH_GOOGLE_URI_TOKEN', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_JWT_SECRET=${{ secrets[format('{0}_AUTH_JWT_SECRET', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "AUTH_SESSION_SECRET=${{ secrets[format('{0}_AUTH_SESSION_SECRET', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "DB_MONGO_COLLECTION_CHAT_SESSIONS=${{ secrets[format('{0}_DB_MONGO_COLLECTION_CHAT_SESSIONS', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "DB_MONGO_COLLECTION_USERS=${{ secrets[format('{0}_DB_MONGO_COLLECTION_USERS', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "DB_MONGO_NAME=${{ secrets[format('{0}_DB_MONGO_NAME', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "DB_MONGO_URI=${{ secrets[format('{0}_DB_MONGO_URI', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "EMBEDDING_HUGGINGFACE_API_KEY=${{ secrets[format('{0}_EMBEDDING_HUGGINGFACE_API_KEY', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "EMBEDDING_HUGGINGFACE_MODEL=${{ secrets[format('{0}_EMBEDDING_HUGGINGFACE_MODEL', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "FRONTEND_URL=${{ secrets[format('{0}_FRONTEND_URL', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "LLM_OPENROUTER_API_BASE=${{ secrets[format('{0}_LLM_OPENROUTER_API_BASE', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "LLM_OPENROUTER_API_KEY=${{ secrets[format('{0}_LLM_OPENROUTER_API_KEY', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "MAIL_FROM_ADDRESS=${{ secrets[format('{0}_MAIL_FROM_ADDRESS', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "MAIL_FROM_NAME=${{ secrets[format('{0}_MAIL_FROM_NAME', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "MAIL_SMTP_HOST=${{ secrets[format('{0}_MAIL_SMTP_HOST', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "MAIL_SMTP_PASSWORD=${{ secrets[format('{0}_MAIL_SMTP_PASSWORD', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "MAIL_SMTP_PORT=${{ secrets[format('{0}_MAIL_SMTP_PORT', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "MAIL_SMTP_USER=${{ secrets[format('{0}_MAIL_SMTP_USER', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "STORAGE_MINIO_ACCESS_KEY=${{ secrets[format('{0}_STORAGE_MINIO_ACCESS_KEY', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "STORAGE_MINIO_BUCKET_SHEETS=${{ secrets[format('{0}_STORAGE_MINIO_BUCKET_SHEETS', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "STORAGE_MINIO_BUCKET_UPLOADS=${{ secrets[format('{0}_STORAGE_MINIO_BUCKET_UPLOADS', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "STORAGE_MINIO_ENDPOINT=${{ secrets[format('{0}_STORAGE_MINIO_ENDPOINT', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "STORAGE_MINIO_SECRET_KEY=${{ secrets[format('{0}_STORAGE_MINIO_SECRET_KEY', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "STORAGE_MINIO_SECURE=${{ secrets[format('{0}_STORAGE_MINIO_SECURE', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "VECTOR_QDRANT_URL=${{ secrets[format('{0}_VECTOR_QDRANT_URL', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "VPS_HOST=${{ secrets[format('{0}_VPS_HOST', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "VPS_URL=${{ secrets[format('{0}_VPS_URL', env.PREFIX)] }}" >> $GITHUB_ENV
          echo "VPS_USERNAME=${{ secrets[format('{0}_VPS_USERNAME', env.PREFIX)] }}" >> $GITHUB_ENV

          # Shared secret
          echo "VPS_PRIVATE_KEY=${{ secrets.VPS_PRIVATE_KEY }}" >> $GITHUB_ENV

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          port: 32222
          key: ${{ env.VPS_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/datax-backend"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/datax-backend:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          port: 32222
          key: ${{ env.VPS_PRIVATE_KEY }}
          script: |
            cd /home/datax-backend
            docker rm -f datax-backend || true
            docker image prune -af || true
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d
            echo "âœ… Deployment successful!"
