name: datax-deploy-backend

on:
  push:
    branches:
      - main      # for Production
      - develop   # for Development
    paths:
      - 'api/**'
      - '.github\workflows\datax-deploy-backend.yml'


jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/datax-backend"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/datax-backend:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            cd /home/datax-backend

            # Select prefix based on branch
            if [[ "${GITHUB_REF##*/}" == "main" ]]; then
              PREFIX="PROD"
            else
              PREFIX="DEV"
            fi

            # Create .env.datax file with environment variables

            echo "AUTH_JWT_SECRET=${{ secrets[format('{0}_AUTH_JWT_SECRET', PREFIX)] }}" > .env.datax
            echo "AUTH_SESSION_SECRET=${{ secrets[format('{0}_AUTH_SESSION_SECRET', PREFIX)] }}" >> .env.datax

            # MONGO
            echo "DB_MONGO_URI=${{ secrets[format('{0}_DB_MONGO_URI', PREFIX)] }}" >> .env.datax
            echo "DB_MONGO_NAME=${{ secrets[format('{0}_DB_MONGO_NAME', PREFIX)] }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_CHAT_SESSIONS=${{ secrets[format('{0}_DB_MONGO_COLLECTION_CHAT_SESSIONS', PREFIX)] }}" >> .env.datax

            # MinIO
            echo "STORAGE_MINIO_ENDPOINT=${{ secrets[format('{0}_STORAGE_MINIO_ENDPOINT', PREFIX)] }}" >> .env.datax
            echo "STORAGE_MINIO_ACCESS_KEY=${{ secrets[format('{0}_STORAGE_MINIO_ACCESS_KEY', PREFIX)] }}" >> .env.datax
            echo "STORAGE_MINIO_SECRET_KEY=${{ secrets[format('{0}_STORAGE_MINIO_SECRET_KEY', PREFIX)] }}" >> .env.datax
            echo "STORAGE_MINIO_SECURE=${{ secrets[format('{0}_STORAGE_MINIO_SECURE', PREFIX)] }}" >> .env.datax
            echo "STORAGE_MINIO_BUCKET_SHEETS=${{ secrets[format('{0}_STORAGE_MINIO_BUCKET_SHEETS', PREFIX)] }}" >> .env.datax
            echo "STORAGE_MINIO_BUCKET_UPLOADS=${{ secrets[format('{0}_STORAGE_MINIO_BUCKET_UPLOADS', PREFIX)] }}" >> .env.datax

            # Google OAuth
            echo "AUTH_GOOGLE_CLIENT_ID=${{ secrets[format('{0}_AUTH_GOOGLE_CLIENT_ID', PREFIX)] }}" >> .env.datax
            echo "AUTH_GOOGLE_CLIENT_SECRET=${{ secrets[format('{0}_AUTH_GOOGLE_CLIENT_SECRET', PREFIX)] }}" >> .env.datax
            echo "AUTH_GOOGLE_PROJECT_ID=${{ secrets[format('{0}_AUTH_GOOGLE_PROJECT_ID', PREFIX)] }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_AUTH=${{ secrets[format('{0}_AUTH_GOOGLE_URI_AUTH', PREFIX)] }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_TOKEN=${{ secrets[format('{0}_AUTH_GOOGLE_URI_TOKEN', PREFIX)] }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_CERTS=${{ secrets[format('{0}_AUTH_GOOGLE_URI_CERTS', PREFIX)] }}" >> .env.datax

            # SMTP Mail
            echo "MAIL_SMTP_HOST=${{ secrets[format('{0}_MAIL_SMTP_HOST', PREFIX)] }}" >> .env.datax
            echo "MAIL_SMTP_PORT=${{ secrets[format('{0}_MAIL_SMTP_PORT', PREFIX)] }}" >> .env.datax
            echo "MAIL_SMTP_USER=${{ secrets[format('{0}_MAIL_SMTP_USER', PREFIX)] }}" >> .env.datax
            echo "MAIL_SMTP_PASSWORD=${{ secrets[format('{0}_MAIL_SMTP_PASSWORD', PREFIX)] }}" >> .env.datax
            echo "MAIL_FROM_NAME=${{ secrets[format('{0}_MAIL_FROM_NAME', PREFIX)] }}" >> .env.datax
            echo "MAIL_FROM_ADDRESS=${{ secrets[format('{0}_MAIL_FROM_ADDRESS', PREFIX)] }}" >> .env.datax

            # LLM
            echo "LLM_OPENROUTER_API_BASE=${{ secrets[format('{0}_LLM_OPENROUTER_API_BASE', PREFIX)] }}" >> .env.datax
            echo "LLM_OPENROUTER_API_KEY=${{ secrets[format('{0}_LLM_OPENROUTER_API_KEY', PREFIX)] }}" >> .env.datax

            # HuggingFace
            echo "EMBEDDING_HUGGINGFACE_API_KEY=${{ secrets[format('{0}_EMBEDDING_HUGGINGFACE_API_KEY', PREFIX)] }}" >> .env.datax
            echo "EMBEDDING_HUGGINGFACE_MODEL=${{ secrets[format('{0}_EMBEDDING_HUGGINGFACE_MODEL', PREFIX)] }}" >> .env.datax

                        

            # Qdrant
            echo "VECTOR_QDRANT_URL=${{ secrets[format('{0}secrets.PROD_VECTOR_QDRANT_URL', PREFIX)] }}" >> .env.datax

            # Frontend/VPS
            echo "FRONTEND_URL=${{ secrets[format('{0}_FRONTEND_URL', PREFIX)] }}" >> .env.datax
            echo "VPS_URL=${{ secrets[format('{0}_VPS_URL', PREFIX)] }}" >> .env.datax

            # Stop and remove old container if exists
            docker rm -f datax-backend || true

            # Remove old unused images
            docker image  prune -af || true

            # Recreate services
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d

            echo "âœ… Deployment successful! Visit: http://62.60.198.4:8040"