name: datax-deploy-backend-prod

on:
  push:
    branches:
      - prod
    paths:
      - 'api/**'
      - '.github/workflows/datax-deploy-backend-prod.yml'

env:
  IMAGE_NAME: datax-backend-prod

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify docker-compose-prod.yml exists
        run: |
          echo "🔍 Checking for docker-compose-prod.yml in repo..."
          ls -l ./api/docker-compose-prod.yml || { echo "ERROR: docker-compose-prod.yml not found in repo"; }
          ls -l ./api/prod-services.yml || { echo "ERROR: prod-services.yml not found in repo"; }
          echo "✅ docker-compose-prod.yml found"
          echo "✅ prod-services.yml found"
          
          echo "Host starts with: $(echo "${{ secrets.PROD_VPS_HOST }}" | head -c 20)..."
          echo "Username starts with: $(echo "${{ secrets.PROD_VPS_USERNAME }}" | head -c 20)..."
          echo "Key starts with: $(echo "${{ secrets.PROD_VPS_KEY }}" | head -c 20)..."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy docker-compose-prod.yml to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: ${{ secrets.PROD_VPS_PORT }}
          key: ${{ secrets.PROD_VPS_KEY }}
          source: "api/docker-compose-prod.yml"
          target: /home/datax-backend
          debug: true

      - name: Copy prod-services.yml to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: ${{ secrets.PROD_VPS_PORT }}
          key: ${{ secrets.PROD_VPS_KEY }}
          source: "api/prod-services.yml"
          target: /home/datax-backend
          debug: true

      - name: Deploy backend and services
        uses: appleboy/ssh-action@v1  
        with: 
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: ${{ secrets.PROD_VPS_PORT }}
          key: ${{ secrets.PROD_VPS_KEY }}
          script: |
            cd /home/datax-backend/api

            # File checks
            echo "🔍 Checking files on VPS..."
            sudo ls -l ./docker-compose-prod.yml || { echo "ERROR: docker-compose-prod.yml not found";  }
            sudo ls -l ./prod-services.yml || { echo "ERROR: prod-services.yml not found";  }
            sudo cat ./docker-compose-prod.yml
            sudo cat ./prod-services.yml
            echo "✅ Files exist"
 
            # Overwrite .env.datax
            echo "🔍 Writing prod .env.datax ..."

            echo "AUTH_JWT_SECRET=${{ secrets.PROD_AUTH_JWT_SECRET }}" > .env.datax
            echo "AUTH_SESSION_SECRET=${{ secrets.PROD_AUTH_SESSION_SECRET }}" >> .env.datax

            echo "DB_MONGO_URI=${{ secrets.PROD_DB_MONGO_URI }}" >> .env.datax
            echo "DB_MONGO_NAME=${{ secrets.PROD_DB_MONGO_NAME }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_CHAT=${{ secrets.PROD_DB_MONGO_COLLECTION_CHAT }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_USERS=${{ secrets.PROD_DB_MONGO_COLLECTION_USERS }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_SESSIONS=${{ secrets.PROD_DB_MONGO_COLLECTION_SESSIONS }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_BILLING=${{ secrets.PROD_DB_MONGO_COLLECTION_BILLING }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_FILE=${{ secrets.PROD_DB_MONGO_COLLECTION_FILE }}" >> .env.datax

            echo "STORAGE_MINIO_ENDPOINT=${{ secrets.PROD_STORAGE_MINIO_ENDPOINT }}" >> .env.datax
            echo "STORAGE_MINIO_USERNAME=${{ secrets.PROD_STORAGE_MINIO_USERNAME }}" >> .env.datax
            echo "STORAGE_MINIO_PASSWORD=${{ secrets.PROD_STORAGE_MINIO_PASSWORD }}" >> .env.datax
            echo "STORAGE_MINIO_SECURE=${{ secrets.PROD_STORAGE_MINIO_SECURE }}" >> .env.datax
            echo "STORAGE_MINIO_BUCKET_SHEETS=${{ secrets.PROD_STORAGE_MINIO_BUCKET_SHEETS }}" >> .env.datax
            echo "STORAGE_MINIO_BUCKET_UPLOADS=${{ secrets.PROD_STORAGE_MINIO_BUCKET_UPLOADS }}" >> .env.datax

            echo "AUTH_GOOGLE_CLIENT_ID=${{ secrets.PROD_AUTH_GOOGLE_CLIENT_ID }}" >> .env.datax
            echo "AUTH_GOOGLE_CLIENT_SECRET=${{ secrets.PROD_AUTH_GOOGLE_CLIENT_SECRET }}" >> .env.datax
            echo "AUTH_GOOGLE_PROJECT_ID=${{ secrets.PROD_AUTH_GOOGLE_PROJECT_ID }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_AUTH=${{ secrets.PROD_AUTH_GOOGLE_URI_AUTH }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_TOKEN=${{ secrets.PROD_AUTH_GOOGLE_URI_TOKEN }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_CERTS=${{ secrets.PROD_AUTH_GOOGLE_URI_CERTS }}" >> .env.datax

            echo "MAIL_SMTP_HOST=${{ secrets.PROD_MAIL_SMTP_HOST }}" >> .env.datax
            echo "MAIL_SMTP_PORT=${{ secrets.PROD_MAIL_SMTP_PORT }}" >> .env.datax
            echo "MAIL_SMTP_USER=${{ secrets.PROD_MAIL_SMTP_USER }}" >> .env.datax
            echo "MAIL_SMTP_PASSWORD=${{ secrets.PROD_MAIL_SMTP_PASSWORD }}" >> .env.datax
            echo "MAIL_FROM_NAME=${{ secrets.PROD_MAIL_FROM_NAME }}" >> .env.datax
            echo "MAIL_FROM_ADDRESS=${{ secrets.PROD_MAIL_FROM_ADDRESS }}" >> .env.datax

            echo "LLM_OPENROUTER_API_BASE=${{ secrets.PROD_LLM_OPENROUTER_API_BASE }}" >> .env.datax
            echo "LLM_OPENROUTER_API_KEY=${{ secrets.PROD_LLM_OPENROUTER_API_KEY }}" >> .env.datax
            echo "MODEL_NAME=${{ secrets.PROD_MODEL_NAME }}" >> .env.datax

            echo "FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL }}" >> .env.datax
            echo "VPS_URL=${{ secrets.PROD_VPS_URL }}" >> .env.datax
            echo "VPS_HOST=${{ secrets.PROD_VPS_HOST }}" >> .env.datax
            echo "VPS_USERNAME=${{ secrets.PROD_VPS_USERNAME }}" >> .env.datax
            echo "VPS_PORT=${{ secrets.PROD_VPS_PORT }}" >> .env.datax
            echo "CORS_CONNECTION=${{ secrets.PROD_CORS_CONNECTION }}" >> .env.datax
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env.datax
            echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env.datax


            sudo cat .env.datax  
            echo "✅ .env.datax written successfully"

            # Load env file
            set -o allexport
            source .env.datax
            set +o allexport


            # Docker login
            echo "🔍 Logging in to Docker Hub..."
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin || { echo "ERROR: Docker Hub login failed";  }
            echo "✅ Docker Hub login successful"


            # Ensure prod network exists
            echo "🔍 Ensuring prod network exists..."
            docker network inspect datax_prod-net >/dev/null 2>&1 || docker network create datax_prod-net
            echo "✅ Prod network is ready"

            # Stop and remove old container
            echo "🔍 Stopping and removing old container..."
            sudo docker rm -f datax-backend-prod || { echo "WARNING: No old container to remove"; }
            echo "✅ Old container removed"

            docker rmi $(docker images ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }} -f 'dangling=true' -q)
            echo "✅ dangling images cleaned up"

            # Deploy backend

            # Deploy services (minio)
            docker compose -f ./prod-services.yml --env-file .env.datax pull
            docker compose -f ./prod-services.yml --env-file .env.datax up -d
            echo "✅ minio service launched"
            
            # Pull image
            echo "🔍 Pulling Docker image..."
            # Pull image
            sudo docker compose -f ./docker-compose-prod.yml pull || { echo "ERROR: Failed to pull image"; }
            echo "✅ Image pulled successfully"

            # Start container
            echo "🔍 Starting container..."
            sudo docker compose -f ./docker-compose-prod.yml up -d --no-build || { echo "ERROR: Failed to start container"; }
            echo "✅ Container started"

            # Wait & Check
            echo "🔍 Waiting for container to stabilize..."
            sleep 10
            echo "🔍 Checking container status..."
            sudo docker ps -a | grep datax-backend-prod || { echo "ERROR: Container datax-backend-prod not running";  }
            echo "✅ Container is running"
            echo "✅ Deployment successful! Visit: ${{ secrets.prod_VPS_URL }}"
