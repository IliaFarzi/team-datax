name: datax-deploy-backend-prod

on:
  push:
    branches:
      - prod
    paths:
      - 'api/**'
      - '.github/workflows/datax-deploy-backend-prod.yml'
      - 'infrastructure/prod-services.yml'

jobs:
  # ============================
  # 1) Build & Push Backend
  # ============================
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy backend docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.PROD_VPS_KEY }}
          source: "docker-compose.yml"
          target: "/home/datax-backend"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/datax-backend:prod

  # ============================
  # 2) Deploy Backend
  # ============================
  deploy_backend:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Backend to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.PROD_VPS_KEY }}
          script: |
            cd /home/datax-backend

            # Write backend env
            echo "AUTH_JWT_SECRET=${{ secrets.PROD_AUTH_JWT_SECRET }}" > .env.datax
            echo "AUTH_SESSION_SECRET=${{ secrets.PROD_AUTH_SESSION_SECRET }}" >> .env.datax
            echo "DB_MONGO_URI=${{ secrets.PROD_DB_MONGO_URI }}" >> .env.datax
            echo "DB_MONGO_NAME=${{ secrets.PROD_DB_MONGO_NAME }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_CHAT_SESSIONS=${{ secrets.PROD_DB_MONGO_COLLECTION_CHAT_SESSIONS }}" >> .env.datax
            echo "DB_MONGO_COLLECTION_USERS=${{ secrets.PROD_DB_MONGO_COLLECTION_USERS }}" >> .env.datax
            echo "STORAGE_MINIO_ENDPOINT=${{ secrets.PROD_STORAGE_MINIO_ENDPOINT }}" >> .env.datax
            echo "STORAGE_MINIO_USERNAME=${{ secrets.PROD_STORAGE_MINIO_USERNAME }}" >> .env.datax
            echo "STORAGE_MINIO_PASSWORD=${{ secrets.PROD_STORAGE_MINIO_PASSWORD }}" >> .env.datax
            echo "STORAGE_MINIO_SECURE=${{ secrets.PROD_STORAGE_MINIO_SECURE }}" >> .env.datax
            echo "STORAGE_MINIO_BUCKET_SHEETS=${{ secrets.PROD_STORAGE_MINIO_BUCKET_SHEETS }}" >> .env.datax
            echo "STORAGE_MINIO_BUCKET_UPLOADS=${{ secrets.PROD_STORAGE_MINIO_BUCKET_UPLOADS }}" >> .env.datax
            echo "AUTH_GOOGLE_CLIENT_ID=${{ secrets.PROD_AUTH_GOOGLE_CLIENT_ID }}" >> .env.datax
            echo "AUTH_GOOGLE_CLIENT_SECRET=${{ secrets.PROD_AUTH_GOOGLE_CLIENT_SECRET }}" >> .env.datax
            echo "AUTH_GOOGLE_PROJECT_ID=${{ secrets.PROD_AUTH_GOOGLE_PROJECT_ID }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_AUTH=${{ secrets.PROD_AUTH_GOOGLE_URI_AUTH }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_TOKEN=${{ secrets.PROD_AUTH_GOOGLE_URI_TOKEN }}" >> .env.datax
            echo "AUTH_GOOGLE_URI_CERTS=${{ secrets.PROD_AUTH_GOOGLE_URI_CERTS }}" >> .env.datax
            echo "MAIL_SMTP_HOST=${{ secrets.PROD_MAIL_SMTP_HOST }}" >> .env.datax
            echo "MAIL_SMTP_PORT=${{ secrets.PROD_MAIL_SMTP_PORT }}" >> .env.datax
            echo "MAIL_SMTP_USER=${{ secrets.PROD_MAIL_SMTP_USER }}" >> .env.datax
            echo "MAIL_SMTP_PASSWORD=${{ secrets.PROD_MAIL_SMTP_PASSWORD }}" >> .env.datax
            echo "MAIL_FROM_NAME=${{ secrets.PROD_MAIL_FROM_NAME }}" >> .env.datax
            echo "MAIL_FROM_ADDRESS=${{ secrets.PROD_MAIL_FROM_ADDRESS }}" >> .env.datax
            echo "LLM_OPENROUTER_API_BASE=${{ secrets.PROD_LLM_OPENROUTER_API_BASE }}" >> .env.datax
            echo "LLM_OPENROUTER_API_KEY=${{ secrets.PROD_LLM_OPENROUTER_API_KEY }}" >> .env.datax
            echo "FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL }}" >> .env.datax
            echo "VPS_URL=${{ secrets.PROD_VPS_URL }}" >> .env.datax
            echo "VPS_HOST=${{ secrets.PROD_VPS_HOST }}" >> .env.datax
            echo "VPS_USERNAME=${{ secrets.PROD_VPS_USERNAME }}" >> .env.datax
            echo "VPS_PORT=${{ secrets.PROD_VPS_PORT }}" >> .env.datax
            echo "CORS_CONNECTION=${{ secrets.PROD_CORS_CONNECTION }}" >> .env.datax
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env.datax
            echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env.datax

            # Restart backend
            docker rm -f datax-backend-prod || true
            docker image prune -af || true
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d

            echo " ✅ Backend deployment successful! Visit: ${{ secrets.PROD_VPS_URL }}"

  # ============================
  # 3) Deploy Services (MinIO)
  # ============================
  deploy_services:
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy prod-services.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          key: ${{ secrets.PROD_VPS_KEY }}
          port: 32222
          source: "infrastructure/prod-services.yml"
          target: "/home/datax-backend"

      - name: Deploy Services to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          key: ${{ secrets.PROD_VPS_KEY }}
          port: 32222
          timeout: 300s
          command_timeout: 600s
          script: |
            cd /home/datax-backend

            # Write env for services
            echo "STORAGE_MINIO_USERNAME=${{ secrets.PROD_STORAGE_MINIO_USERNAME }}" > .services.env
            echo "STORAGE_MINIO_PASSWORD=${{ secrets.PROD_STORAGE_MINIO_PASSWORD }}" >> .services.env
            echo "STORAGE_MINIO_ENDPOINT=${{ secrets.PROD_STORAGE_MINIO_ENDPOINT }}" >> .services.env

            # Run services
            docker compose -f prod-services.yml --env-file .services.env pull
            docker compose -f prod-services.yml --env-file .services.env up -d --no-build

            docker system prune -a -f
            echo " ✅ Services deployed successfully!"
