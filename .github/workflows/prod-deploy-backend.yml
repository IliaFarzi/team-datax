name: datax-deploy-backend

on:
  push:
    branches:
      - prod
    paths:
      - 'api/**'
      - '.github/workflows/prod-deploy-backend.yml'


jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.PROD_VPS_PRIVATE_KEY }}
          source: "prod-docker-compose.yml"
          target: "/home/datax-backend"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/prod-datax-backend:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_VPS_HOST }}
          username: ${{ secrets.PROD_VPS_USERNAME }}
          port: 32222
          key: ${{ secrets.PROD_VPS_PRIVATE_KEY }}
          script: |
            cd /home/datax-backend

            # Create .env.datax file with environment variables
            echo "OPENROUTER_API_BASE=${{ secrets.OPENROUTER_API_BASE }}" > .env.datax
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env.datax
            echo "JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}" >> .env.datax
            echo "DATAX_MONGO_URI=${{ secrets.PROD_MONGO_URI }}" >> .env.datax
            echo "DATAX_MONGO_COLLECTION_NAME=${{ secrets.DATAX_MONGO_COLLECTION_NAME }}" >> .env.datax
            echo "DATAX_MONGO_DB_NAME=${{ secrets.DATAX_MONGO_DB_NAME }}" >> .env.datax
            echo "FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL }}" >> .env.datax
            echo "SESSION_SECRET_KEY=${{ secrets.PROD_SESSION_SECRET_KEY }}" >> .env.datax
            echo "DATAX_MINIO_ACCESS_KEY=${{ secrets.PROD_MINIO_ACCESS_KEY }}" >> .env.datax
            echo "DATAX_MINIO_SECRET_KEY=${{ secrets.PROD_MINIO_SECRET_KEY }}" >> .env.datax
            echo "DATAX_MINIO_ENDPOINT=${{ secrets.PROD_MINIO_ENDPOINT }}" >> .env.datax
            echo "DATAX_MINIO_BUCKET_SHEETS=${{ secrets.DATAX_MINIO_BUCKET_SHEETS }}" >> .env.datax
            echo "DATAX_MINIO_BUCKET_UPLOADS=${{ secrets.DATAX_MINIO_BUCKET_UPLOADS }}" >> .env.datax
            echo "DATAX_MINIO_SECURE=${{secrets.DATAX_MINIO_SECURE}}" >> .env.datax
            echo "GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}" >> .env.datax
            echo "GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}" >> .env.datax
            echo "GOOGLE_TOKEN_URI=${{secrets.GOOGLE_TOKEN_URI}}" >> .env.datax
            echo "GOOGLE_AUTH_URI=${{secrets.GOOGLE_AUTH_URI}}" >> .env.datax
            echo "GOOGLE_AUTH_PROVIDER_X509_CERT_URL=${{secrets.GOOGLE_AUTH_PROVIDER_X509_CERT_URL}}" >> .env.datax
            echo "GOOGLE_PROJECT_ID=${{secrets.GOOGLE_PROJECT_ID}}" >> .env.datax

            # Mail Config
            echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env.datax
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.datax
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env.datax
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env.datax
            echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env.datax
            echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env.datax

            echo "VPS_URL=${{ secrets.VPS_URL }}" >> .env.datax
            
            # add qdrant url
            echo "QDRANT_URL=${{ secrets.QDRANT_URL }}" >> .env.datax

            # embedding model
            echo "HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY}}" >> .env.datax
            echo "HUGGINGFACE_EMBEDDING_MODEL=${{ secrets.HUGGINGFACE_EMBEDDING_MODEL}}" >> .env.datax



            # Stop and remove old container if exists
            docker rm -f datax-backend || true

            # Remove old unused images
            docker image  prune -af || true

            # Recreate services
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d

            echo "âœ… Deployment successful! Visit: http://62.60.198.4:8040"